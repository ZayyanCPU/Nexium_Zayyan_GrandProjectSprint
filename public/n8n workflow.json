{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recipe-generation",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e57fe527-0e9b-4b9b-89b3-29f4288e38e5",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "recipe-generation"
    },
    {
      "parameters": {
        "jsCode": "// Validate and process incoming webhook data\nconst { recipeId, prompt, email, userId } = $input.all()[0].json;\n\n// Validate required fields\nif (!recipeId || !prompt || !email) {\n  throw new Error('Missing required fields: recipeId, prompt, or email');\n}\n\n// Normalize email\nconst normalizedEmail = email.toLowerCase().trim();\n\n// Log the incoming request\nconsole.log(`Recipe generation request received for user: ${normalizedEmail}`);\nconsole.log(`Recipe ID: ${recipeId}`);\nconsole.log(`Prompt: ${prompt}`);\n\nreturn {\n  recipeId,\n  prompt: prompt.trim(),\n  email: normalizedEmail,\n  userId,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "980d1af9-d781-47d6-acc0-89d4d7fc311a",
      "name": "Validate Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $env.GEMINI_API_KEY }}"
            },
            {
              "name": "contents",
              "value": "=[{\n  \"parts\": [\n    {\n      \"text\": \"You are a professional chef and recipe creator. Create a detailed, step-by-step recipe from the given ingredients. The recipe should be practical, delicious, and include all necessary information.\\n\\nIngredients provided: {{ $json.prompt }}\\n\\nPlease create a recipe and return it in the following JSON format:\\n\\n{\\n  \\\"title\\\": \\\"Recipe Title\\\",\\n  \\\"instructions\\\": \\\"Step 1: ...\\nStep 2: ...\\nStep 3: ...\\\",\\n  \\\"metadata\\\": {\\n    \\\"cookingTime\\\": \\\"30-45 minutes\\\",\\n    \\\"servings\\\": \\\"4 servings\\\",\\n    \\\"difficulty\\\": \\\"Medium\\\",\\n    \\\"cuisine\\\": \\\"International\\\",\\n    \\\"prepTime\\\": \\\"15 minutes\\\",\\n    \\\"totalTime\\\": \\\"45-60 minutes\\\",\\n    \\\"calories\\\": \\\"350-450 kcal\\\",\\n    \\\"tags\\\": [\\\"Quick\\\", \\\"Healthy\\\"],\\n    \\\"ingredients\\\": [\\\"ingredient1\\\", \\\"ingredient2\\\"]\\n  }\\n}\"\n    }\n  ]\n}]"
            }
          ]
        },
        "options": {}
      },
      "id": "3ed1708c-ad5e-4c4b-8eeb-ab292dc01c68",
      "name": "Gemini API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        448,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Gemini API response and extract recipe data\nconst geminiResponse = $input.all()[0].json;\n\n// Extract the generated text from Gemini response\nconst generatedText = geminiResponse.candidates[0].content.parts[0].text;\n\n// Try to extract JSON from the response\nlet recipeData;\ntry {\n  // Look for JSON in the response\n  const jsonMatch = generatedText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    recipeData = JSON.parse(jsonMatch[0]);\n  } else {\n    throw new Error('No JSON found in response');\n  }\n} catch (error) {\n  console.error('Error parsing Gemini response:', error);\n  \n  // Fallback recipe if parsing fails\n  recipeData = {\n    title: \"Simple Recipe from Your Ingredients\",\n    instructions: \"1. Prepare your ingredients\\n2. Follow basic cooking methods\\n3. Season to taste\",\n    metadata: {\n      cookingTime: \"30 minutes\",\n      servings: \"2-4 servings\",\n      difficulty: \"Easy\",\n      cuisine: \"General\",\n      prepTime: \"10 minutes\",\n      totalTime: \"40 minutes\",\n      calories: \"300-400 kcal\",\n      tags: [\"Simple\", \"Quick\"],\n      ingredients: $('Validate Request').item.json.prompt.split(',').map(item => item.trim())\n    }\n  };\n}\n\n// Combine with original request data\nreturn {\n  ...$('Validate Request').item.json,\n  ...recipeData,\n  generatedAt: new Date().toISOString()\n};"
      },
      "id": "9747259c-7f49-4d4b-a541-8bb2de81295d",
      "name": "Parse Recipe",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.NEXTJS_APP_URL }}/api/recipe-complete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "recipeId",
              "value": "={{ $json.recipeId }}"
            },
            {
              "name": "status",
              "value": "completed"
            },
            {
              "name": "userEmail",
              "value": "={{ $json.email }}"
            },
            {
              "name": "metadata",
              "value": "={{ {\n  title: $json.title,\n  instructions: $json.instructions,\n  ...$json.metadata\n} }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9a2d4a85-55a4-4be2-911c-9803ad56b683",
      "name": "Update Database",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        896,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare success response\nconst recipeData = $('Parse Recipe').item.json;\nconst updateResult = $('Update Database').item.json;\n\nconsole.log(`Recipe generation completed for user: ${recipeData.email}`);\nconsole.log(`Recipe ID: ${recipeData.recipeId}`);\nconsole.log(`Recipe Title: ${recipeData.title}`);\n\nreturn {\n  success: true,\n  recipeId: recipeData.recipeId,\n  email: recipeData.email,\n  title: recipeData.title,\n  message: 'Recipe generated and saved successfully',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "83bcc055-a46e-4e66-9a86-3127cbce4371",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        0
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "5f6e6025-50a4-420f-87f9-2213daa2b4f5",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1344,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error handling and logging\nconst error = $input.all()[0].json;\n\nconsole.error('Workflow error:', error);\n\n// Try to update recipe status to failed\nconst originalData = $('Validate Request').item.json;\n\ntry {\n  await fetch(`${$env.NEXTJS_APP_URL}/api/recipe-complete`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      recipeId: originalData.recipeId,\n      status: 'failed',\n      userEmail: originalData.email,\n      metadata: { error: error.message }\n    })\n  });\n} catch (updateError) {\n  console.error('Failed to update recipe status:', updateError);\n}\n\nreturn {\n  success: false,\n  error: error.message,\n  recipeId: originalData.recipeId,\n  email: originalData.email,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "63f370ef-eeae-48e5-86cb-7cf6679f0b4d",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        224
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Request": {
      "main": [
        [
          {
            "node": "Gemini API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini API": {
      "main": [
        [
          {
            "node": "Parse Recipe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Recipe": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Database": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8c8f6a24-788d-4854-92e3-a863dfbad7ce",
  "meta": {
    "instanceId": "ad0056618527a4491d739fef0086a1ed18efecf015c1f002f8f8b29b238204b2"
  },
  "id": "W6euzlSNqJ2Syww0",
  "tags": []
}